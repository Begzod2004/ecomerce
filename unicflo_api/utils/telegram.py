import logging
import asyncio
from django.conf import settings
from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

# Emoji constants
EMOJIS = {
    'pending': '‚è≥',
    'processing': 'üîÑ',
    'ready_for_pickup': '‚ú®',
    'shipped': 'üì¶',
    'delivered': '‚úÖ',
    'canceled': '‚ùå',
    'returned': '‚Ü©Ô∏è',
    'notification': 'üîî',
    'status': 'üìç',
    'price': 'üí∞',
    'branch': 'üè™',
    'home': 'üè†',
}

class TelegramService:
    @staticmethod
    async def send_message(chat_id, message):
        if not settings.TELEGRAM_BOT_TOKEN:
            logger.warning("TELEGRAM_BOT_TOKEN not set. Skipping notification.")
            return
            
        try:
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
            logger.info(f"Telegram message sent to {chat_id}")
        except TelegramError as e:
            logger.error(f"Failed to send Telegram message: {str(e)}")
        except Exception as e:
            logger.error(f"Unexpected error while sending Telegram message: {str(e)}")

    @staticmethod
    def notify_order_status(order):
        if not order.user.telegram_id:
            logger.info(f"User {order.user.username} has no Telegram chat ID. Skipping notification.")
            return
            
        status_emoji = EMOJIS.get(order.status, EMOJIS['notification'])
        
        # Create a detailed message
        message = (
            f"{EMOJIS['notification']} *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.id}*\n\n"
            f"{EMOJIS['status']} –°—Ç–∞—Ç—É—Å: {status_emoji} {order.get_status_display()}\n"
            f"{EMOJIS['price']} –°—É–º–º–∞: {order.final_amount:,} —Å—É–º\n"
        )

        # Add delivery information based on shipping method
        if order.shipping_method:
            if order.shipping_method.delivery_type == 'branch_pickup':
                branch = order.pickup_branch
                if branch:
                    message += f"\n{EMOJIS['branch']} *–§–∏–ª–∏–∞–ª –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:*\n"
                    message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {branch.name}\n"
                    message += f"–ê–¥—Ä–µ—Å: {branch.street}, {branch.district}\n"
                    message += f"–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {branch.working_hours}\n"
                    if branch.location_link:
                        message += f"–õ–æ–∫–∞—Ü–∏—è: {branch.location_link}\n"
            else:  # home_delivery
                address = order.delivery_address
                if address:
                    message += f"\n{EMOJIS['home']} *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"
                    message += f"–ê–¥—Ä–µ—Å: {address.street}, {address.district}\n"
                    message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone_number}\n"
        
        # Add status-specific messages
        if order.status == 'pending':
            message += "\n–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        elif order.status == 'processing':
            message += "\n–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
        elif order.status == 'ready_for_pickup':
            message += "\n–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∏–ª–∏–∞–ª–µ!\n"
        elif order.status == 'shipped':
            message += "\n–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
            if order.tracking_number:
                message += f"–ù–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {order.tracking_number}\n"
        elif order.status == 'delivered':
            message += "\n–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
        elif order.status == 'canceled':
            message += "\n–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n"
        elif order.status == 'returned':
            message += "\n–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω.\n"
        
        # Add order items
        message += "\n–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
        for item in order.items.select_related('product').all():
            message += f"‚Ä¢ {item.quantity}x {item.product.name} ({item.price:,} —Å—É–º)\n"
        
        try:
            asyncio.run(TelegramService.send_message(order.user.telegram_id, message))
        except Exception as e:
            logger.error(f"Failed to send order notification: {str(e)}")
            
    @staticmethod
    def send_welcome_message(user):
        if not user.telegram_id:
            logger.info(f"User has no Telegram chat ID. Skipping welcome message.")
            return
            
        message = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unicflo, {user.get_full_name() or user.username}!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞. "
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–¥–µ—Å—å.\n\n"
            "–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõçÔ∏è"
        )
        
        try:
            asyncio.run(TelegramService.send_message(user.telegram_id, message))
        except Exception as e:
            logger.error(f"Failed to send welcome message: {str(e)}")